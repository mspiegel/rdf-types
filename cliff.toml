[changelog]
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - [{{ commit.id | truncate(length=7, end="") }}] {{ commit.message }}\
    {% endfor %}
{% endfor %}\n
"""
# Remove the leading and trailing whitespace.
trim = true

[git]
# Ignore conventional commits.
conventional_commits = false
filter_unconventional = false

# Process each line of a commit as an individual commit.
split_commits = true

# Regex for parsing and grouping commits.
commit_parsers = [
    { message = "^[aA]dd( |ed)", group = "Added"},
    { message = "^[iI]mpl", group = "Added"},
    { message = "^[fF]ix( |ed)", group = "Fixed"},
    { message = "^[cC]hange( |ed)", group = "Changed"},
    { message = "^[mM]ove( |d)", group = "Changed"},
    { message = "^[rR]estructure( |d)", group = "Changed"},
    { message = "^[rR]efactor( |ed)", group = "Changed"},
    { message = "^[rR]emove( |d)", group = "Removed"},
    { message = "^[uU]pgrade( |d)", group = "Build"},
    { message = "^[bB]ump( |ed)", group = "Build"}
]

# Protect breaking changes from being skipped due to matching a skipping commit_parser.
protect_breaking_commits = false

# Filter out the commits that are not matched by commit parsers.
filter_commits = true

# Glob pattern for matching git tags
tag_pattern = "[0-9\\.]*"

# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"